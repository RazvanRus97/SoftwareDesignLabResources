// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParkingAppAPI.Repositories;

namespace ParkingAppAPI.Migrations
{
    [DbContext(typeof(ParkingDbContext))]
    partial class ParkingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085");

            modelBuilder.Entity("ParkingAppAPI.Models.Car", b =>
                {
                    b.Property<int>("VIN")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PTI");

                    b.Property<int?>("UserId")
                        .IsRequired();

                    b.HasKey("VIN");

                    b.HasIndex("UserId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("ParkingAppAPI.Models.ParkingLot", b =>
                {
                    b.Property<int>("ParkingLotId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.HasKey("ParkingLotId");

                    b.ToTable("ParkingLots");
                });

            modelBuilder.Entity("ParkingAppAPI.Models.ParkingSpot", b =>
                {
                    b.Property<int>("SpotNumber")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsFree");

                    b.Property<int?>("ParkingLotId")
                        .IsRequired();

                    b.HasKey("SpotNumber");

                    b.HasIndex("ParkingLotId");

                    b.ToTable("ParkingSpots");
                });

            modelBuilder.Entity("ParkingAppAPI.Models.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CarVIN")
                        .IsRequired();

                    b.Property<DateTime>("Date");

                    b.Property<int?>("ParkingSpotSpotNumber");

                    b.Property<int>("Status");

                    b.HasKey("RequestId");

                    b.HasIndex("CarVIN");

                    b.HasIndex("ParkingSpotSpotNumber");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("ParkingAppAPI.Models.RequestParkingLot", b =>
                {
                    b.Property<int>("ParkingLotId");

                    b.Property<int>("RequestId");

                    b.HasKey("ParkingLotId", "RequestId");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestParkingLot");
                });

            modelBuilder.Entity("ParkingAppAPI.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<bool>("IsAdmin");

                    b.Property<string>("Password")
                        .IsRequired();

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ParkingAppAPI.Models.Car", b =>
                {
                    b.HasOne("ParkingAppAPI.Models.User", "User")
                        .WithMany("Cars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ParkingAppAPI.Models.ParkingSpot", b =>
                {
                    b.HasOne("ParkingAppAPI.Models.ParkingLot", "ParkingLot")
                        .WithMany("ParkingSpots")
                        .HasForeignKey("ParkingLotId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ParkingAppAPI.Models.Request", b =>
                {
                    b.HasOne("ParkingAppAPI.Models.Car", "Car")
                        .WithMany("Requests")
                        .HasForeignKey("CarVIN")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ParkingAppAPI.Models.ParkingSpot", "ParkingSpot")
                        .WithMany("Requests")
                        .HasForeignKey("ParkingSpotSpotNumber");
                });

            modelBuilder.Entity("ParkingAppAPI.Models.RequestParkingLot", b =>
                {
                    b.HasOne("ParkingAppAPI.Models.ParkingLot", "ParkingLot")
                        .WithMany("Requests")
                        .HasForeignKey("ParkingLotId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ParkingAppAPI.Models.Request", "Request")
                        .WithMany("ParkingLots")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
